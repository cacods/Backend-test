AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Orders API with DynamoDB

Globals:
  Api:
    Cors:
      AllowHeaders: "'Content-Type,Authorization'"

Resources:
  # DynamoDB Tables
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "UserIdIndex"
          KeySchema:
            - AttributeName: "userId"
              KeyType: "HASH"
            - AttributeName: "createdAt"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # API Gateway
  OrdersApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"  # Enable CORS (adjust as needed)

  # Lambda Functions
  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: create_order.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
          USERS_TABLE: !Ref UsersTable
      Events:
        CreateOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: POST
            RestApiId: !Ref OrdersApi

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: get_order.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /orders/{id}
            Method: GET
            RestApiId: !Ref OrdersApi

  ListOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: list_orders.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
      Events:
        ListOrders:
          Type: Api
          Properties:
            Path: /orders
            Method: GET
            RestApiId: !Ref OrdersApi

  DeleteOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: delete_order.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
      Events:
        DeleteOrder:
          Type: Api
          Properties:
            Path: /orders/{id}
            Method: DELETE
            RestApiId: !Ref OrdersApi

Outputs:
  OrdersApiUrl:
    Description: "URL of the Orders API"
    Value: !Sub "https://${OrdersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"